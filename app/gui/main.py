import streamlit as st
from pathlib import Path
import json
from typing import Dict, List, Optional
import sys
import os
from datetime import datetime
from docx import Document
from langchain_openai import ChatOpenAI
from langchain.schema import HumanMessage, SystemMessage, AIMessage

# P≈ôid√°n√≠ root adres√°≈ôe do PYTHONPATH
root_dir = str(Path(__file__).parent.parent.parent)
if root_dir not in sys.path:
    sys.path.append(root_dir)

from app.utils.import_proposals import import_proposals, load_document
from app.utils.search_proposals import search_proposals
from app.proposal_graph import SimpleStateGraph, Step, ProposalState

# Konfigurace str√°nky
st.set_page_config(
    page_title="BidMaster",
    page_icon="üìù",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styly
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
        margin-bottom: 1rem;
    }
    .status-box {
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    .user-message {
        background-color: #2e3136;
    }
    .assistant-message {
        background-color: #3a3f45;
    }
    .system-message {
        background-color: #1e2124;
        color: #8e9297;
        font-style: italic;
    }
    </style>
""", unsafe_allow_html=True)

def initialize_session_state():
    """Inicializace session state pro uchov√°n√≠ stavu aplikace."""
    if 'current_step' not in st.session_state:
        st.session_state.current_step = Step.ANALYZE_REQUEST
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'proposal_state' not in st.session_state:
        st.session_state.proposal_state = ProposalState()
    if 'graph' not in st.session_state:
        st.session_state.graph = SimpleStateGraph()
    if 'llm' not in st.session_state:
        st.session_state.llm = ChatOpenAI(temperature=0.7)
    if 'log' not in st.session_state:
        st.session_state.log = []

def add_log(message: str):
    """P≈ôid√° zpr√°vu do logu."""
    timestamp = datetime.now().strftime("%H:%M:%S")
    st.session_state.log.append(f"[{timestamp}] {message}")

def render_chat_message(message: dict):
    """Vykresl√≠ zpr√°vu v chatu."""
    role = message["role"]
    content = message["content"]
    
    if role == "user":
        st.markdown(f'<div class="chat-message user-message">üë§ **Vy**: {content}</div>', unsafe_allow_html=True)
    elif role == "assistant":
        st.markdown(f'<div class="chat-message assistant-message">ü§ñ **Asistent**: {content}</div>', unsafe_allow_html=True)
    elif role == "system":
        st.markdown(f'<div class="chat-message system-message">‚ÑπÔ∏è {content}</div>', unsafe_allow_html=True)

def get_next_question(state: ProposalState) -> str:
    """Z√≠sk√° dal≈°√≠ ot√°zku od chatbota."""
    messages = [
        SystemMessage(content="""Jsi asistent pro anal√Ωzu popt√°vek na implementaci MidPoint.
        Tv√Ωm √∫kolem je z√≠skat v≈°echny pot≈ôebn√© informace pro vytvo≈ôen√≠ nab√≠dky.
        Ptej se struƒçnƒõ a jasnƒõ. Zamƒõ≈ô se na:
        - Technick√© po≈æadavky
        - Integraƒçn√≠ po≈æadavky
        - ƒåasov√© po≈æadavky
        - Rozpoƒçtov√© omezen√≠
        - Specifick√© po≈æadavky klienta"""),
    ]
    
    # P≈ôid√°n√≠ historie konverzace
    for msg in state.chat_history:
        if msg["role"] == "user":
            messages.append(HumanMessage(content=msg["content"]))
        elif msg["role"] == "assistant":
            messages.append(AIMessage(content=msg["content"]))
    
    # P≈ôid√°n√≠ kontextu aktu√°ln√≠ho stavu
    context = f"""
    Dosud zn√°m√© informace:
    - Poƒçet u≈æivatel≈Ø: {state.expected_users}
    - Term√≠n dokonƒçen√≠: {state.deadline}
    - Po≈æadovan√© moduly: {', '.join(state.modules)}
    - Integrace: {', '.join(state.integrations) if state.integrations else 'nezad√°no'}
    - ≈†kolen√≠: {', '.join(state.training) if state.training else 'nezad√°no'}
    - √örove≈à podpory: {state.support_level}
    """
    messages.append(HumanMessage(content=f"Na z√°kladƒõ tƒõchto informac√≠: {context}\nJak√° je tv√° dal≈°√≠ ot√°zka?"))
    
    response = st.session_state.llm.invoke(messages)
    return response.content

def create_proposal_document(state: ProposalState) -> str:
    """Vytvo≈ô√≠ dokument s nab√≠dkou na z√°kladƒõ z√≠skan√Ωch informac√≠ a ulo≈æ√≠ jej do adres√°≈ôe generated_proposals."""
    
    try:
        # Inicializace dokumentu
        doc = Document()
        
        # Nadpis
        doc.add_heading('Nab√≠dka implementace MidPoint', level=0)
        
        # Datum
        now = datetime.now()
        date_str = now.strftime("%d.%m.%Y")
        doc.add_paragraph(f'Datum: {date_str}')
        
        # Hled√°n√≠ relevantn√≠ho kontextu
        context = ""
        if state.client_request:
            similar_proposals = search_proposals(state.client_request)
            if similar_proposals:
                context = "\n".join([p["content"] for p in similar_proposals[:3]])
        
        # Z√°kladn√≠ syst√©mov√Ω prompt pro v≈°echny sekce
        base_system_prompt = """Jsi profesion√°ln√≠ business konzultant s rozs√°hl√Ωmi znalostmi v oblasti implementace MidPoint.
        Tv√Ωm √∫kolem je vytvo≈ôit profesion√°ln√≠ ƒç√°st obchodn√≠ nab√≠dky, kter√° bude:
        - Vƒõcn√° a konkr√©tn√≠
        - Profesion√°ln√≠ a form√°ln√≠
        - V ƒçesk√©m jazyce
        - Bez technick√©ho ≈æargonu, srozumiteln√° pro business stakeholdery
        - P≈ôehlednƒõ strukturovan√°
        
        D≈ÆLE≈ΩIT√â: Tv≈Øj v√Ωstup MUS√ç b√Ωt ƒçist√Ω text s bƒõ≈æn√Ωm form√°tov√°n√≠m (odstavce, odr√°≈æky), 
        NE k√≥d, NE JSON, NE dictionary ani jin√© datov√© struktury!
        """
        
        # ===== SEKCE 1: POPIS ≈òE≈†EN√ç =====
        doc.add_heading('2. Popis ≈ôe≈°en√≠', level=1)
        solution_prompt = f"""Vytvo≈ô profesion√°ln√≠ "Popis ≈ôe≈°en√≠" pro nab√≠dku implementace MidPoint.
        
        Informace:
        - Popt√°vka klienta: {state.client_request}
        - Poƒçet u≈æivatel≈Ø: {state.expected_users}
        - Po≈æadovan√© moduly: {', '.join(state.modules)}
        - Integrace: {', '.join(state.integrations) if state.integrations else 'Nen√≠ specifikov√°no'}
        
        Kontext z podobn√Ωch nab√≠dek:
        {context}
        
        Vytvo≈ô struƒçn√Ω, ale informativn√≠ popis MidPoint ≈ôe≈°en√≠, kter√Ω:
        1. Vysvƒõtl√≠ co je MidPoint a jak√© jsou jeho hlavn√≠ p≈ô√≠nosy
        2. Zd≈Ørazn√≠ kl√≠ƒçov√© funkce relevantn√≠ pro tohoto klienta
        3. Pop√≠≈°e, jak ≈ôe≈°en√≠ adresuje klientovy pot≈ôeby z popt√°vky
        
        D≈ÆLE≈ΩIT√â: V√Ωstup form√°tuj jako bƒõ≈æn√Ω text s odstavci, NE jako JSON nebo Python dictionary!
        """
        
        messages = [
            SystemMessage(content=base_system_prompt),
            HumanMessage(content=solution_prompt)
        ]
        solution_response = st.session_state.llm.invoke(messages)
        doc.add_paragraph(solution_response.content)
        
        # ===== SEKCE 2: ROZSAH PRAC√ç =====
        doc.add_heading('3. Rozsah prac√≠', level=1)
        scope_prompt = f"""Vytvo≈ô profesion√°ln√≠ sekci "Rozsah prac√≠" pro nab√≠dku implementace MidPoint.
        
        Informace:
        - Popt√°vka klienta: {state.client_request}
        - Po≈æadovan√© moduly: {', '.join(state.modules)}
        - Integrace: {', '.join(state.integrations) if state.integrations else 'Nen√≠ specifikov√°no'}
        - ≈†kolen√≠: {', '.join(state.training) if state.training else 'Nen√≠ specifikov√°no'}
        
        Kontext z podobn√Ωch nab√≠dek:
        {context}
        
        Vytvo≈ô p≈ôehlednƒõ strukturovan√Ω popis rozsahu prac√≠, kter√Ω:
        1. Zaƒç√≠n√° √∫vodn√≠m odstavcem shrnuj√≠c√≠m celkov√Ω rozsah implementace
        2. Obsahuje seznam konkr√©tn√≠ch oblast√≠ pr√°ce (5-6 polo≈æek)
        3. Ka≈ædou oblast detailnƒõ pop√≠≈°e vƒçetnƒõ oƒçek√°van√Ωch v√Ωstup≈Ø
        
        Form√°tuj v√Ωstup jako souvisl√Ω text s nadpisy a odstavci. 
        D≈ÆLE≈ΩIT√â: V√Ωstup MUS√ç b√Ωt ƒçist√Ω text, NE k√≥d, NE JSON struktura, NE Python dictionary!
        """
        
        messages = [
            SystemMessage(content=base_system_prompt),
            HumanMessage(content=scope_prompt)
        ]
        scope_response = st.session_state.llm.invoke(messages)
        doc.add_paragraph(scope_response.content)
        
        # ===== SEKCE 3: HARMONOGRAM =====
        doc.add_heading('4. Harmonogram', level=1)
        timeline_prompt = f"""Vytvo≈ô profesion√°ln√≠ sekci "Harmonogram" pro nab√≠dku implementace MidPoint.
        
        Informace:
        - Popt√°vka klienta: {state.client_request}
        - Po≈æadovan√Ω term√≠n dokonƒçen√≠: {state.deadline}
        - Rozsah prac√≠: {', '.join(state.modules)}
        - Integrace: {', '.join(state.integrations) if state.integrations else 'Nen√≠ specifikov√°no'}
        
        Kontext z podobn√Ωch nab√≠dek:
        {context}
        
        Vytvo≈ô p≈ôehledn√Ω harmonogram implementace, kter√Ω:
        1. Zaƒç√≠n√° √∫vodn√≠m odstavcem shrnuj√≠c√≠m celkovou dobu implementace
        2. Obsahuje seznam jednotliv√Ωch f√°z√≠ (anal√Ωza, n√°vrh, implementace, testov√°n√≠, atd.)
        3. Pro ka≈ædou f√°zi uv√°d√≠ jej√≠ n√°zev, dobu trv√°n√≠ a struƒçn√Ω popis aktivit
        4. Konƒç√≠ z√°vƒõreƒçn√Ωm odstavcem shrnuj√≠c√≠m celkov√Ω ƒçasov√Ω pl√°n
        
        Form√°tuj v√Ωstup jako souvisl√Ω text s nadpisy, odstavci a p≈ô√≠padnƒõ s p≈ôehlednou tabulkou f√°z√≠.
        D≈ÆLE≈ΩIT√â: V√Ωstup MUS√ç b√Ωt ƒçist√Ω text, NE k√≥d, NE JSON struktura, NE Python dictionary!
        """
        
        messages = [
            SystemMessage(content=base_system_prompt),
            HumanMessage(content=timeline_prompt)
        ]
        timeline_response = st.session_state.llm.invoke(messages)
        doc.add_paragraph(timeline_response.content)
        
        # ===== SEKCE 4: CENOV√Å NAB√çDKA =====
        doc.add_heading('5. Cenov√° nab√≠dka', level=1)
        pricing_prompt = f"""Vytvo≈ô profesion√°ln√≠ sekci "Cenov√° nab√≠dka" pro implementaci MidPoint.
        
        Informace:
        - Popt√°vka klienta: {state.client_request}
        - Poƒçet u≈æivatel≈Ø: {state.expected_users}
        - Po≈æadovan√© moduly: {', '.join(state.modules)}
        - Integrace: {', '.join(state.integrations) if state.integrations else 'Nen√≠ specifikov√°no'}
        - ≈†kolen√≠: {', '.join(state.training) if state.training else 'Nen√≠ specifikov√°no'}
        
        Kontext z podobn√Ωch nab√≠dek:
        {context}
        
        Vytvo≈ô detailn√≠ cenovou nab√≠dku, kter√°:
        1. Zaƒç√≠n√° √∫vodn√≠m odstavcem shrnuj√≠c√≠m cenovou nab√≠dku
        2. Obsahuje seznam polo≈æek s cenami (v Kƒç bez DPH)
        3. Pro ka≈ædou polo≈æku uv√°d√≠ jej√≠ n√°zev a cenu
        4. Konƒç√≠ souƒçtem s celkovou cenou
        
        Form√°tuj v√Ωstup jako souvisl√Ω text s nadpisy, odstavci a p≈ôehlednou tabulkou cen.
        D≈ÆLE≈ΩIT√â: V√Ωstup MUS√ç b√Ωt ƒçist√Ω text, NE k√≥d, NE JSON struktura, NE Python dictionary!
        """
        
        messages = [
            SystemMessage(content=base_system_prompt),
            HumanMessage(content=pricing_prompt)
        ]
        pricing_response = st.session_state.llm.invoke(messages)
        doc.add_paragraph(pricing_response.content)
        
        # Ulo≈æen√≠ dokumentu
        # Vytvo≈ôen√≠ slo≈æky pro vygenerovan√© nab√≠dky, pokud neexistuje
        proposals_dir = Path("generated_proposals")
        if not proposals_dir.exists():
            proposals_dir.mkdir(parents=True)
        
        # Ulo≈æen√≠ dokumentu s ƒçasov√Ωm raz√≠tkem
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        doc_path = proposals_dir / f"nabidka_midpoint_{timestamp}.docx"
        doc.save(str(doc_path))
        
        add_log(f"Vygenerov√°na nab√≠dka: {doc_path}")
        return str(doc_path)
    
    except Exception as e:
        st.error(f"Chyba p≈ôi generov√°n√≠ dokumentu: {str(e)}")
        add_log(f"Chyba p≈ôi generov√°n√≠ dokumentu: {str(e)}")
        return None

def render_sidebar():
    """Vykreslen√≠ postrann√≠ho panelu."""
    with st.sidebar:
        st.title("BidMaster")
        st.markdown("---")
        
        # Navigaƒçn√≠ menu
        st.subheader("Menu")
        if st.button("Nov√° nab√≠dka"):
            st.session_state.current_step = Step.ANALYZE_REQUEST
            st.session_state.chat_history = []
            st.session_state.proposal_state = ProposalState()
            add_log("Zah√°jena nov√° nab√≠dka")
        
        if st.button("Import nab√≠dek"):
            st.session_state.current_step = "IMPORT"
            add_log("P≈ôepnuto na import nab√≠dek")
        
        if st.button("Vyhled√°v√°n√≠"):
            st.session_state.current_step = "SEARCH"
            add_log("P≈ôepnuto na vyhled√°v√°n√≠")
        
        st.markdown("---")
        
        # Status
        st.subheader("Status")
        st.write(f"Aktu√°ln√≠ krok: {st.session_state.current_step}")
        
        # Log
        st.subheader("Log")
        for log_message in st.session_state.log:
            st.text(log_message)

def render_analyze_request():
    """Vykreslen√≠ formul√°≈ôe pro anal√Ωzu popt√°vky."""
    st.header("Anal√Ωza popt√°vky")
    
    # P≈ôid√°n√≠ mo≈ænosti nahr√°t soubor s popt√°vkou
    uploaded_file = st.file_uploader(
        "Nahrajte soubor s popt√°vkou (voliteln√©)",
        type=['pdf', 'docx', 'txt', 'json'],
        help="M≈Ø≈æete nahr√°t popt√°vku jako PDF, DOCX, TXT nebo JSON soubor."
    )
    
    # Pokud byl nahr√°n soubor, naƒçteme jeho obsah
    if uploaded_file:
        try:
            # Vytvo≈ôen√≠ temp adres√°≈ôe, pokud neexistuje
            temp_dir = Path("temp")
            temp_dir.mkdir(exist_ok=True)
            
            # Ulo≈æen√≠ souboru
            file_path = temp_dir / uploaded_file.name
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            add_log(f"Nahr√°n soubor: {uploaded_file.name}")
            
            # Naƒçten√≠ obsahu podle typu souboru
            if file_path.suffix.lower() == '.txt':
                with open(file_path, 'r', encoding='utf-8') as f:
                    file_content = f.read()
            elif file_path.suffix.lower() in ['.pdf', '.docx']:
                documents = load_document(str(file_path))
                file_content = "\n\n".join([doc.page_content for doc in documents])
            elif file_path.suffix.lower() == '.json':
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    file_content = data.get('text', '') if isinstance(data, dict) else str(data)
            
            # Smaz√°n√≠ doƒçasn√©ho souboru
            file_path.unlink()
            
            st.success("Soubor byl √∫spƒõ≈°nƒõ naƒçten!")
            add_log("Soubor byl √∫spƒõ≈°nƒõ zpracov√°n")
            
        except Exception as e:
            st.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ souboru: {str(e)}")
            add_log(f"Chyba p≈ôi zpracov√°n√≠ souboru: {str(e)}")
            file_content = ""
    else:
        file_content = ""
    
    with st.form("analyze_request_form"):
        client_request = st.text_area(
            "Zadejte popt√°vku klienta",
            value=file_content,
            height=200,
            placeholder="Popi≈°te po≈æadavky klienta na implementaci MidPoint..."
        )
        
        col1, col2 = st.columns(2)
        with col1:
            expected_users = st.number_input("Poƒçet u≈æivatel≈Ø", min_value=1, value=100)
        with col2:
            deadline = st.date_input("Po≈æadovan√Ω term√≠n dokonƒçen√≠")
        
        modules = st.multiselect(
            "Po≈æadovan√© moduly",
            ["Role Management", "Workflow Management", "Self-service", "Reporting", "Audit", "Rekonciliace"],
            default=["Role Management"]
        )
        
        submit = st.form_submit_button("Analyzovat popt√°vku")
        
        if submit and client_request:
            st.session_state.proposal_state.client_request = client_request
            st.session_state.proposal_state.expected_users = expected_users
            st.session_state.proposal_state.deadline = deadline
            st.session_state.proposal_state.modules = modules
            st.session_state.current_step = Step.GATHER_INFORMATION
            
            # P≈ôid√°n√≠ prvn√≠ zpr√°vy do historie
            st.session_state.chat_history.append({
                "role": "user",
                "content": client_request
            })
            
            add_log("Popt√°vka byla analyzov√°na")

def render_gather_information():
    """Vykreslen√≠ formul√°≈ôe pro sbƒõr dopl≈àuj√≠c√≠ch informac√≠."""
    st.header("Dopl≈àuj√≠c√≠ informace")
    
    # Zobrazen√≠ historie konverzace
    for message in st.session_state.chat_history:
        render_chat_message(message)
    
    # Z√≠sk√°n√≠ dal≈°√≠ ot√°zky od chatbota
    if not st.session_state.chat_history or st.session_state.chat_history[-1]["role"] == "user":
        next_question = get_next_question(st.session_state.proposal_state)
        st.session_state.chat_history.append({
            "role": "assistant",
            "content": next_question
        })
        render_chat_message(st.session_state.chat_history[-1])
    
    # Formul√°≈ô pro odpovƒõƒè
    with st.form("gather_info_form"):
        user_response = st.text_area("Va≈°e odpovƒõƒè", height=100)
        col1, col2 = st.columns([1, 4])
        
        with col1:
            submit = st.form_submit_button("Odpovƒõdƒõt")
        with col2:
            if st.form_submit_button("P≈ôej√≠t na generov√°n√≠ nab√≠dky"):
                st.session_state.current_step = Step.GENERATE_PROPOSAL
                add_log("P≈ôechod na generov√°n√≠ nab√≠dky")
                return
        
        if submit and user_response:
            st.session_state.chat_history.append({
                "role": "user",
                "content": user_response
            })
            add_log("P≈ôid√°na odpovƒõƒè u≈æivatele")
            st.rerun()

def render_generate_proposal():
    """Vykreslen√≠ generov√°n√≠ nab√≠dky."""
    st.header("Generov√°n√≠ nab√≠dky")
    
    # Zobrazen√≠ shrnut√≠
    st.subheader("Shrnut√≠ po≈æadavk≈Ø")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Z√°kladn√≠ informace**")
        st.write(f"Poƒçet u≈æivatel≈Ø: {st.session_state.proposal_state.expected_users}")
        st.write(f"Term√≠n dokonƒçen√≠: {st.session_state.proposal_state.deadline}")
        st.write("\n**Moduly**")
        for module in st.session_state.proposal_state.modules:
            st.write(f"- {module}")
    
    with col2:
        st.write("**Integrace**")
        for integration in st.session_state.proposal_state.integrations:
            st.write(f"- {integration}")
        st.write("\n**≈†kolen√≠**")
        for training in st.session_state.proposal_state.training:
            st.write(f"- {training}")
        st.write(f"\n**Podpora**: {st.session_state.proposal_state.support_level}")
    
    if st.button("Generovat nab√≠dku"):
        try:
            file_path = create_proposal_document(st.session_state.proposal_state)
            st.success(f"Nab√≠dka byla vygenerov√°na a ulo≈æena do: {file_path}")
            add_log(f"Nab√≠dka byla vygenerov√°na: {file_path}")
            
            # Nab√≠dnut√≠ sta≈æen√≠ souboru
            with open(file_path, "rb") as file:
                st.download_button(
                    label="St√°hnout nab√≠dku",
                    data=file,
                    file_name=os.path.basename(file_path),
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
        except Exception as e:
            st.error(f"Chyba p≈ôi generov√°n√≠ nab√≠dky: {str(e)}")
            add_log(f"Chyba p≈ôi generov√°n√≠ nab√≠dky: {str(e)}")

def render_import():
    """Vykreslen√≠ importu nab√≠dek."""
    st.header("Import nab√≠dek")
    
    uploaded_files = st.file_uploader(
        "Vyberte soubory k importu",
        accept_multiple_files=True,
        type=['pdf', 'docx', 'json']
    )
    
    if uploaded_files:
        # Vytvo≈ôen√≠ temp adres√°≈ôe, pokud neexistuje
        temp_dir = Path("temp")
        temp_dir.mkdir(exist_ok=True)
        
        for file in uploaded_files:
            file_path = temp_dir / file.name
            with open(file_path, "wb") as f:
                f.write(file.getbuffer())
            
            try:
                import_proposals([str(file_path)])
                st.success(f"Soubor {file.name} byl √∫spƒõ≈°nƒõ importov√°n")
                add_log(f"Importov√°n soubor: {file.name}")
            except Exception as e:
                st.error(f"Chyba p≈ôi importu souboru {file.name}: {str(e)}")
                add_log(f"Chyba p≈ôi importu souboru {file.name}: {str(e)}")
            finally:
                if file_path.exists():
                    file_path.unlink()

def render_search():
    """Vykreslen√≠ vyhled√°v√°n√≠ v nab√≠dk√°ch."""
    st.header("Vyhled√°v√°n√≠ v nab√≠dk√°ch")
    
    query = st.text_input("Zadejte hledan√Ω text")
    
    if query:
        try:
            add_log(f"Vyhled√°v√°n√≠: {query}")
            results = search_proposals(query)
            
            if results:
                for i, result in enumerate(results, 1):
                    with st.expander(f"V√Ωsledek {i}"):
                        st.write(result.page_content)
                        st.write("---")
                        st.write("**Metadata:**")
                        st.json(result.metadata)
                add_log(f"Nalezeno {len(results)} v√Ωsledk≈Ø")
            else:
                st.info("Nebyly nalezeny ≈æ√°dn√© v√Ωsledky.")
                add_log("≈Ω√°dn√© v√Ωsledky")
                
        except Exception as e:
            st.error(f"Chyba p≈ôi vyhled√°v√°n√≠: {str(e)}")
            add_log(f"Chyba p≈ôi vyhled√°v√°n√≠: {str(e)}")

def main():
    """Hlavn√≠ funkce aplikace."""
    initialize_session_state()
    render_sidebar()
    
    # Vykreslen√≠ hlavn√≠ho obsahu podle aktu√°ln√≠ho kroku
    if st.session_state.current_step == Step.ANALYZE_REQUEST:
        render_analyze_request()
    elif st.session_state.current_step == Step.GATHER_INFORMATION:
        render_gather_information()
    elif st.session_state.current_step == Step.GENERATE_PROPOSAL:
        render_generate_proposal()
    elif st.session_state.current_step == "IMPORT":
        render_import()
    elif st.session_state.current_step == "SEARCH":
        render_search()

if __name__ == "__main__":
    main() 